#!/bin/bash
# wardrobedb

# Stop on errors
# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail


DATABASE_PATH="var/wardrobe.sqlite3"
UPLOAD_OUTPUT="var/uploads"
SCHEMA_PATH="sql/schema.sql"
DATA_PATH="sql/data.sql"
UPLOAD_SOURCE="sql/uploads/*"

# Sanity check command line options
usage() {
  echo "Usage: $0 (create|destroy|reset|dump)"
}

if [ $# -ne 1 ]; then
  usage
  exit 1
fi

# Parse argument.  $1 is the first argument
case $1 in
  "create")
    if [ -e "$DATABASE_PATH" ]; then
      echo "Error: database already exists"
      exit 1
    fi
    mkdir -p "$UPLOAD_OUTPUT"
    sqlite3 "$DATABASE_PATH" < "$SCHEMA_PATH"
    sqlite3 "$DATABASE_PATH" < "$DATA_PATH"
    cp $UPLOAD_SOURCE "$UPLOAD_OUTPUT"
    echo "+ mkdir -p "$UPLOAD_OUTPUT""
    echo "+ sqlite3 "$DATABASE_PATH" < "$SCHEMA_PATH""
    echo "+ sqlite3 "$DATABASE_PATH" < "$DATA_PATH""
    echo "+ cp $UPLOAD_SOURCE "$UPLOAD_OUTPUT""
    ;;

  "destroy")
    rm -rf "$DATABASE_PATH" "$UPLOAD_OUTPUT"
    echo "+ rm -rf "$DATABASE_PATH" "$UPLOAD_OUTPUT""
    ;;

  "random")
    for i in `seq 1 100`; do
      FILENAME="$(uuidgen).png"
      NUMS=()
      for j in `seq 1 6`; do
        NUMS+=($(($RANDOM % 255)))
      done
      convert -size 360x360 \
         radial-gradient:"rgb(${NUMS[0]},${NUMS[1]},${NUMS[2]})-rgb(${NUMS[3]},${NUMS[4]},${NUMS[5]})" \
         -pointsize 64 -fill black -gravity center -annotate 0 "image $i" "var/uploads/$FILENAME"
      OWNER="awdeorio"
      sqlite3 -echo -batch ${DATABASE_PATH} "INSERT INTO posts(filename, owner) VALUES('${FILENAME}','${OWNER}');"
    done
    ;;  

  "reset")
    rm -rf "$DATABASE_PATH" "$UPLOAD_OUTPUT"
    mkdir -p "$UPLOAD_OUTPUT"
    sqlite3 "$DATABASE_PATH" < "$SCHEMA_PATH"
    sqlite3 "$DATABASE_PATH" < "$DATA_PATH"
    cp $UPLOAD_SOURCE "$UPLOAD_OUTPUT"
    echo "+ rm -rf "$DATABASE_PATH" "$UPLOAD_OUTPUT""
    echo "+ mkdir -p "$UPLOAD_OUTPUT""
    echo "+ sqlite3 "$DATABASE_PATH" < "$SCHEMA_PATH""
    echo "+ sqlite3 "$DATABASE_PATH" < "$DATA_PATH""
    echo "+ cp $UPLOAD_SOURCE "$UPLOAD_OUTPUT""
    ;;

  "dump")
    tables=("comments" "following" "likes" "posts" "users")
    for table in "${tables[@]}"; do
      echo "+ sqlite3 -batch -line $DATABASE_PATH 'SELECT * FROM $table'"
      sqlite3 -batch -line "$DATABASE_PATH" "SELECT * FROM $table"
      echo ""
    done
    ;;

  *)
    usage
    exit 1
    ;;
esac

